from fastapi import APIRouter, Query, HTTPException
from typing import List, Optional
from datetime import datetime
from pydantic import BaseModel
from ..database import get_supabase

router = APIRouter()

# ------------------------------
# üì¶ MODELS
# ------------------------------
class TelemetryIn(BaseModel):
    vehicle_id: int
    latitude: Optional[float] = None
    longitude: Optional[float] = None
    speed_kmh: Optional[float] = None
    battery_pct: Optional[float] = None
    temperature: Optional[float] = None
    rpm: Optional[float] = None
    recorded_at: Optional[datetime] = None


class TelemetryOut(TelemetryIn):
    id: int


# ------------------------------
# üìä ROUTES
# ------------------------------

@router.get("/telemetry", response_model=List[TelemetryOut])
def get_telemetry(
    vehicle_id: int = Query(..., description="ID du v√©hicule"),
    limit: int = Query(50, description="Nombre maximum d‚Äôenregistrements √† retourner"),
    from_date: Optional[datetime] = Query(None, description="Filtrer √† partir de cette date"),
    to_date: Optional[datetime] = Query(None, description="Filtrer jusqu‚Äô√† cette date"),
):
    """üì• R√©cup√©rer les donn√©es t√©l√©m√©triques filtr√©es pour un v√©hicule"""
    try:
        supabase = get_supabase()

        query = supabase.table("telemetry").select("*").eq("vehicle_id", vehicle_id)

        if from_date:
            query = query.gte("recorded_at", from_date.isoformat())
        if to_date:
            query = query.lte("recorded_at", to_date.isoformat())

        res = query.order("recorded_at", desc=True).limit(limit).execute()

        # ‚úÖ V√©rification propre des erreurs
        if hasattr(res, "error") and res.error:
            raise HTTPException(status_code=500, detail=str(res.error))

        # ‚úÖ Supabase renvoie souvent un dict avec cl√© 'data'
        if isinstance(res, dict):
            data = res.get("data", [])
        else:
            data = getattr(res, "data", [])

        if not data:
            return []  # Pas d'erreur ‚Üí juste vide

        return data

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la r√©cup√©ration des donn√©es : {e}")


@router.get("/telemetry/latest", response_model=TelemetryOut)
def get_latest(vehicle_id: int = Query(..., description="ID du v√©hicule")):
    """üì° R√©cup√©rer la derni√®re donn√©e de t√©l√©m√©trie pour un v√©hicule"""
    try:
        supabase = get_supabase()

        res = (
            supabase.table("telemetry")
            .select("*")
            .eq("vehicle_id", vehicle_id)
            .order("recorded_at", desc=True)
            .limit(1)
            .execute()
        )

        if hasattr(res, "error") and res.error:
            raise HTTPException(status_code=500, detail=str(res.error))

        data = res.data if hasattr(res, "data") else res.get("data", [])
        if not data:
            raise HTTPException(status_code=404, detail="Aucune donn√©e trouv√©e pour ce v√©hicule.")

        return data[0]

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erreur lors de la r√©cup√©ration de la derni√®re donn√©e : {e}")
